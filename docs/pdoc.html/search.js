window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "stemdiff", "modulename": "stemdiff", "kind": "module", "doc": "<h6 id=\"stemdiff-package\">STEMDIFF package</h6>\n\n<p>Conversion of 4D-STEM dataset to single 2D-powder diffration pattern.</p>\n\n<ul>\n<li>Input = 4D-STEM dataset\n<ul>\n<li>The 4D-STEM dataset = 2D-array of 2D-NBD (nanobeam diffraction) patterns.</li>\n<li>2D-array = usually one (or more) two-dimensional scanning array(s).</li>\n<li>2D-NBD's = monocrystalline-like nanobeam diffraction patterns.</li>\n</ul></li>\n<li>Output = 2D-powder diffraction pattern\n<ul>\n<li>A 2D-powder diffraction pattern is calculated from a 4D-STEM dataset.</li>\n<li>The calculation is basically a specific summation of 2D-NBD patterns.</li>\n<li>In other words, a 4D-STEM dataset is reduced to a 2D-diffraction pattern.</li>\n<li>The whole method (and final pattern) is called 4D-STEM/PNBD (powder NBD).</li>\n</ul></li>\n</ul>\n"}, {"fullname": "stemdiff.dbase", "modulename": "stemdiff.dbase", "kind": "module", "doc": "<h2 id=\"stemdiffdbase\">stemdiff.dbase</h2>\n\n<p>Functions for the reading of 4D-STEM datafiles\nto create database of all files.</p>\n\n<ul>\n<li>The database is a pandas DataFrame which contains the following\ndata for each datafile:\nfilename, XY-center, MaximumIntensity, NoOfPeaks, Entropy.</li>\n<li>The database enables fast filtering of datafiles\nand fast access to each datafile features,\nwhich do not have to be re-calculated repeatedly.</li>\n</ul>\n"}, {"fullname": "stemdiff.dbase.calc_database", "modulename": "stemdiff.dbase", "qualname": "calc_database", "kind": "function", "doc": "<p>Read 4D-STEM datafiles and calculate database of all files,\nwhich contains [filename, S-entropy and XY-center] for each datafile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SDATA</strong> (stemdiff.gvars.SourceData object):\nThe object describes source data (detector, data_dir, filenames).</li>\n<li><strong>DIFFIMAGES</strong> (stemdiff.gvars.DiffImages object):\nObject describing the diffraction images/patterns.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pandas DataFrame object):\nDatabase contains [filename, xc, yc, MaxInt, NumPeaks, S]\nfor each datafile in the dataset.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">DIFFIMAGES</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.save_database", "modulename": "stemdiff.dbase", "qualname": "save_database", "kind": "function", "doc": "<p>Save database, which contains [filenames, entropies and XY-centers]\nof all 4D-STEM datafiles; the dbase is saved as pickled object/zip-file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas DataFrame object):\nThis object is a database of all datafiles,\nwhich contains [filenames, entropies and XY-centers]\nof each datafile in 4D-STEM dataset.</li>\n<li><strong>output_file</strong> (str):\nFilename of the output file (without extension).\nThe database is saved as a pickled object/zip-file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong>: The output is the database <em>df</em> saved as <em>output_file</em> on a disk.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">output_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.dbase.read_database", "modulename": "stemdiff.dbase", "qualname": "read_database", "kind": "function", "doc": "<p>Read database, which contains [filenames, entropies and centers]\nof all 4D-STEM datafiles.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_database</strong> (str or pandas.DataFrame):\n<ul>\n<li>str = filename of the input file that contains the database.</li>\n<li>pandas.Dataframe = dataframe that contains the database.</li>\n<li>Why two possile types of input?\nIf the database is in memory in the form of pandas.DataFrame\n(which is quite common), it is useles to re-read it from file.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>df</strong> (pandas DataFrame object):\nDatabase that has been read from disk or pandas.Dataframe.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_database</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.detectors", "modulename": "stemdiff.detectors", "kind": "module", "doc": "<h2 id=\"stemdiffdetectors\">stemdiff.detectors</h2>\n\n<p>Known detectors for package stemdiff.</p>\n\n<p>This module is basically a container of classes.\nEach class describes a pixelated STEM detector, from which we get datafiles.\nThe description is not difficult - all we need to define is\ndetector name, detector size, data type, upscaling coefficient,\nand how to read/save datafiles in given detector format.</p>\n\n<p>All detector parameters are described below in TimePix detector class.\nTherefore, the new classes = new detectors can be added quite easily:</p>\n\n<ul>\n<li>Copy class describing detector TimePix.</li>\n<li>Rename the class as needed, for example: My_new_STEM_detector.</li>\n<li>Re-define all properties and methods of the new class as necessary.</li>\n<li>When you are done, the new detector can be used within STEMDIFF package.</li>\n</ul>\n"}, {"fullname": "stemdiff.detectors.list_of_known_detectors", "modulename": "stemdiff.detectors", "qualname": "list_of_known_detectors", "kind": "function", "doc": "<p>Get a list of known detectors = classes defined in stemdiff.detectors.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>detectors</strong> (list):\nList of known detectors = classes defined in stemdiff.detectors module.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.detectors.print_known_detectors", "modulename": "stemdiff.detectors", "qualname": "print_known_detectors", "kind": "function", "doc": "<p>Print a list of known detectors = classes defined in stemdiff.detectors.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The list of detectors is just printed on the screen.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.detectors.TimePix", "modulename": "stemdiff.detectors", "qualname": "TimePix", "kind": "class", "doc": "<p>Definition of TimePix detector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>detector_name</strong> (str, default is 'TimePix'):\nName of the detector.\nKeep the default unless you have specific reasons.</li>\n<li><strong>detector_size</strong> (integer, default is 256):\nSize of the detector in pixels.\nKeep the default unless you have specific reasons.</li>\n<li><strong>max_intensity</strong> (int, default is 11810):\nMaximum intensity of TimePix detector.\nKeep the default unless you have specific reasons.</li>\n<li><strong>data_type</strong> (numpy data type, optional, default is np.uint16):\nType of data, which are saved in the binary file.\nTimePix detector saves the data as 16-bit integers.\nThis corresponds to np.uint16 (more info in NumPy documentation).</li>\n<li><strong>upscale</strong> (integer, default is 4):\nUpscaling coefficient.\nFinal image size = detector_size * upscale.\nThe upscaling coefficient increases the detector resolution.\nSurprisingly enough, the upscaling helps to improve final resolution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>TimePix detector object.</strong></li>\n</ul>\n"}, {"fullname": "stemdiff.detectors.TimePix.__init__", "modulename": "stemdiff.detectors", "qualname": "TimePix.__init__", "kind": "function", "doc": "<p>Initialize parameters of TimePix detector.\nThe parameters are described above in class definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">detector_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;TimePix&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">detector_size</span><span class=\"o\">=</span><span class=\"mi\">256</span>,</span><span class=\"param\">\t<span class=\"n\">max_intensity</span><span class=\"o\">=</span><span class=\"mi\">11810</span>,</span><span class=\"param\">\tdata_type=&lt;class &#x27;numpy.uint16&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">upscale</span><span class=\"o\">=</span><span class=\"mi\">4</span></span>)</span>"}, {"fullname": "stemdiff.detectors.TimePix.read_datafile", "modulename": "stemdiff.detectors", "qualname": "TimePix.read_datafile", "kind": "function", "doc": "<p>Read datafile in TimePix detector format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str or path):\nName of the datafile to read.</li>\n<li><strong>arr_size</strong> (int, optional, default is None):\nSize of the square array to reade.\nTypically, we read original datafiles with size = detector.size.\nNonetheless, we can read saved also datafiles with size = arr_size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\n2D-array containing image from TimePix detector.\nEach element of the array = the intensity detected at given pixel.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">arr_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.detectors.TimePix.save_datafile", "modulename": "stemdiff.detectors", "qualname": "TimePix.save_datafile", "kind": "function", "doc": "<p>Save 2D-array as a datafile in the TimePix detector format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.detectors.Secom", "modulename": "stemdiff.detectors", "qualname": "Secom", "kind": "class", "doc": "<p>Definition of Secom detector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>detector_name</strong> (str, default is 'TimePix'):\nName of the detector.\nKeep the default unless you have specific reasons.</li>\n<li><strong>detector_size</strong> (integer, default is 256):\nSize of the detector in pixels.\nKeep the default unless you have specific reasons.</li>\n<li><strong>data_type</strong> (numpy data type, optional, default is np.uint16):\nType of data, which are saved in the binary file.\nTimePix detector saves the data as 16-bit integers.\nThis corresponds to np.uint16 (more info in NumPy documentation).</li>\n<li><strong>upscale</strong> (integer, default is 4):\nUpscaling coefficient.\nFinal image size = detector_size * upscale.\nThe upscaling coefficient increases the detector resolution.\nSurprisingly enough, the upscaling helps to improve final resolution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>TimePix detector object.</strong></li>\n</ul>\n"}, {"fullname": "stemdiff.detectors.Secom.__init__", "modulename": "stemdiff.detectors", "qualname": "Secom.__init__", "kind": "function", "doc": "<p>Initialize parameters of TimePix detector.\nThe parameters are described above in class definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">detector_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;TimePix&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">detector_size</span><span class=\"o\">=</span><span class=\"mi\">256</span>,</span><span class=\"param\">\tdata_type=&lt;class &#x27;numpy.uint16&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">upscale</span><span class=\"o\">=</span><span class=\"mi\">4</span></span>)</span>"}, {"fullname": "stemdiff.detectors.Secom.read_datafile", "modulename": "stemdiff.detectors", "qualname": "Secom.read_datafile", "kind": "function", "doc": "<p>Read datafile in TimePix detector format.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str or path):\nName of the datafile to read.</li>\n<li><strong>arr_size</strong> (int, optional, default is None):\nSize of the square array to reade.\nTypically, we read original datafiles with size = detector.size.\nNonetheless, we can read saved also datafiles with size = arr_size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\n2D-array containing image from TimePix detector.\nEach element of the array = the intensity detected at given pixel.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">arr_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.detectors.Secom.save_datafile", "modulename": "stemdiff.detectors", "qualname": "Secom.save_datafile", "kind": "function", "doc": "<p>Save 2D-array as a datafile in the TimePix detector format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.gvars", "modulename": "stemdiff.gvars", "kind": "module", "doc": "<h2 id=\"stemdiffgvars\">stemdiff.gvars</h2>\n\n<p>Global variables/objects for package stemdiff.</p>\n\n<p>The global variables are used throughout the whole program.\nIn order to be easily accessible, they are defined as two objects:</p>\n\n<ul>\n<li>SourceData = an object defining the input datafiles.</li>\n<li>DiffImages = an object desribing basic/common features of all NBD patterns.</li>\n</ul>\n\n<p>The usage of stemdiff.gvars module is quite simple.\nIn 99% cases, we just add the following code at beginning of STEMDIFF script\n(the arguments have to be adjusted to given experiment, of course):</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Define source data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (datafiles from TimePix detector</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (saved in data directory: D:/DATA.SH/STEMDIFF/SAMPLE_8</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (datafiles are in subdirs: 01,02,... and named as: *.dat</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SDATA</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">gvars</span><span class=\"o\">.</span><span class=\"n\">SourceData</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">detector</span>  <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">detectors</span><span class=\"o\">.</span><span class=\"n\">TimePix</span><span class=\"p\">(),</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">data_dir</span>  <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;D:/DATA.SH/STEMDIFF/SAMPLE_8&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>    <span class=\"n\">filenames</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;??/*.dat&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Set parameters of diffractin images</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (we consider only central region with imgsize=100</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (size of the region for PSF estimate will be: psfsize=30</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (values of other/all args =&gt; documentation of stemdiff.gvars.DiffImages</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">DIFFIMAGES</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">gvars</span><span class=\"o\">.</span><span class=\"n\">DiffImages</span><span class=\"p\">(</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>   <span class=\"n\">imgsize</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">psfsize</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>   <span class=\"n\">ctype</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span>\n<span class=\"gp\">&gt;&gt;&gt; </span>   <span class=\"n\">peak_height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">peak_dist</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "stemdiff.gvars.SourceData", "modulename": "stemdiff.gvars", "qualname": "SourceData", "kind": "class", "doc": "<p>Define the input datafiles.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_dir</strong> (str (which will be passed to Path method)):\nThis parameter is passed to Path method from pathlib library.\nIt is strongly recommeded to use r-strings.\nExample: <code>data_dir = r'd:/data.sh/stemdiff/tio2'</code>.</li>\n<li><strong>files</strong> (str (which will be passed to data_dir.glob method)):\nThis parameter is passed to Path.glob method from pathlib library.\nIt is strongly recommeded to use r-strings.\nExample1: <code>datafiles = r'*.dat'</code> = all <code>*.dat</code> files in parent_dir;\nExample2: <code>datafiles = r'??/*.dat'</code> = all <code>*.dat</code> in subdirs <code>01,02...</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DataFiles object.</strong></li>\n</ul>\n"}, {"fullname": "stemdiff.gvars.SourceData.__init__", "modulename": "stemdiff.gvars", "qualname": "SourceData.__init__", "kind": "function", "doc": "<p>Initialize DataFiles object.\nThe parameters are described above in class definition.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">detector</span>, </span><span class=\"param\"><span class=\"n\">data_dir</span>, </span><span class=\"param\"><span class=\"n\">filenames</span></span>)</span>"}, {"fullname": "stemdiff.gvars.DiffImages", "modulename": "stemdiff.gvars", "qualname": "DiffImages", "kind": "class", "doc": "<p>Set parameters/characteristics of experimental diffraction images.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>imgsize</strong> (integer, smaller than detector_size):\nSize of array read from the detector is reduced to imgsize.\nIf given, we sum only the central square with size = imgsize.\nSmaller area = higher speed;\nouter area = just weak diffractions.</li>\n<li><strong>psfize</strong> (integer, smaller than detector_size):\nSize/edge of central square, from which 2D-PSF is determined.</li>\n<li><strong>ctype</strong> (integer, values = 0,1,2):\n0 = intensity center not determined, geometrical center is used;\n1 = center determined from the first image and kept constant;\n2 = center is determined for each individual image.</li>\n<li><strong>csquare</strong> (integer, interval = 10--DET_SIZE):\nSize of the central square (in pixels),\nwithin which the center of intensity is searched for.</li>\n<li><strong>cintensity</strong> (float, interval = 0--1):\nIntensity fraction, which is used for center determination.\nExample: cintensity=0.9 =&gt; consider only pixels &gt; 0.9 * max.intensity.</li>\n<li><strong>peak_height</strong> (float, optional, default is 100):\nSearch for peaks whose intensity &gt; peak_height.</li>\n<li><strong>peak_dist</strong> (integer, optional, default is 3):\nMinimal distance between possible neighboring peaks.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>DiffImages object.</strong></li>\n</ul>\n"}, {"fullname": "stemdiff.gvars.DiffImages.__init__", "modulename": "stemdiff.gvars", "qualname": "DiffImages.__init__", "kind": "function", "doc": "<p>Initialize parameters for center determination.\nThe parameters are described above in class definition.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">imgsize</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">psfsize</span><span class=\"o\">=</span><span class=\"mi\">30</span>,</span><span class=\"param\">\t<span class=\"n\">ctype</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">peak_dist</span><span class=\"o\">=</span><span class=\"mi\">3</span></span>)</span>"}, {"fullname": "stemdiff.io", "modulename": "stemdiff.io", "kind": "module", "doc": "<h2 id=\"stemdiffio\">stemdiff.io</h2>\n\n<p>Input/output functions for package stemdiff.</p>\n\n<p>Three types of stemdiff.io objects</p>\n\n<ul>\n<li>Datafiles = files on disk, saved directly from a 2D-STEM detector.</li>\n<li>Arrays = the datafiles converted to numpy array objects.</li>\n<li>Images = the datafiles converted to PNG files.</li>\n</ul>\n\n<p>General strategy for working with stemdiff.io objects</p>\n\n<ul>\n<li>Datafiles and Images are usually\nnot used directly, but just converted to Array objects.</li>\n<li>All data manipulation (showing, scaling, saving ...)\nis done within Array objects.</li>\n<li>Datafiles and Images have (intentionally) just a limited amount of methods,\nthe most important of which is read - this method simply reads\nDatafile/Image to an array.</li>\n</ul>\n\n<p>Additional stemdiff.io utilities</p>\n\n<ul>\n<li>These are stored directly in the package, without any subclassing.</li>\n<li>Mostly general routines for more convenient I/O within stemdiff package.</li>\n</ul>\n\n<p>Examples how to use Datafiles, Arrays and Images</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Show a datafile</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (basic operation =&gt; there is Datafiles.function for it</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Datafiles</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">SDATA</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Read a datafile to array</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (basic operation =&gt; there is Datafiles.function for it</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Datafiles</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">SDATA</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Describe AND show the datafile</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (more complex operation:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (1) read datafile to array - using Datafiles.read</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># (2) do what you need (here: describe, show) - using Arrays.functions</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Datafiles</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">SDATA</span><span class=\"p\">,</span> <span class=\"n\">datafile</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">stemdiff</span><span class=\"o\">.</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "stemdiff.io.set_plot_parameters", "modulename": "stemdiff.io", "qualname": "set_plot_parameters", "kind": "function", "doc": "<p>Set global plot parameters (mostly for plotting in Jupyter).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>size</strong> (tuple of two floats, optional, the default is (12,9)):\nSize of the figure (width, height) in [cm].</li>\n<li><strong>dpi</strong> (int, optional, the defalut is 75):\nDPI of the figure.</li>\n<li><strong>fontsize</strong> (int, optional, the default is 10):\nSize of the font used in figure labels etc.</li>\n<li><strong>my_rcParams</strong> (dict, optional, default is None):\nDictionary in plt.rcParams format\ncontaining any other allowed global plot parameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None; the result is a modification of the global plt.rcParams variable.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>, </span><span class=\"param\"><span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">75</span>, </span><span class=\"param\"><span class=\"n\">fontsize</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">my_rcParams</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.plot_2d_diffractograms", "modulename": "stemdiff.io", "qualname": "plot_2d_diffractograms", "kind": "function", "doc": "<p>Plot a few selected 2D diffraction patterns in a row one-by-one.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>data_to_plot</strong> (list of lists):\nThis object is a list of lists.\nThe number of rows = the number of plotted diffractograms.\nEach row contains two elements:\n(i) data for diffractogram to plot and (ii) title of the plot.\nThe data (first element of each row) can be:\n(i) PNG-file or (ii) 2D-array containing the 2D diffractogram.</li>\n<li><strong>integer, optional, default is None</strong>: Cut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>cmap</strong> (str - matplotlib.colormap name, optional, the default is 'viridis'):\nMatplotlib colormap for plotting of the diffractogram.\nOther interesting or high-contrast options:\n'gray', 'plasma', 'magma', ...\nThe full list of matplotlib colormaps:\n<code>matplotlib.pyplot.colormaps()</code></li>\n<li><strong>output_file</strong> (str, optional, default is None):\nIf this argument is given,\nthe plot is also saved in <em>output_file</em> image\nwith <em>dpi</em> resolution (dpi is specified by the following argument).</li>\n<li><strong>dpi</strong> (int, optional, default is 300):\nThe (optional) argument gives resolution of (optional) output image.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n<li><strong>The output is the plot of the diffraction patterns on the screen.</strong></li>\n<li><strong>If argument <em>ouput_file</em> is given, the plot is also saved as an image.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_to_plot</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;viridis&#39;</span>, </span><span class=\"param\"><span class=\"n\">output_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dpi</span><span class=\"o\">=</span><span class=\"mi\">300</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Datafiles", "modulename": "stemdiff.io", "qualname": "Datafiles", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "stemdiff.io.Datafiles.read", "modulename": "stemdiff.io", "qualname": "Datafiles.read", "kind": "function", "doc": "<p>Read a datafile from STEM detector to an array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SDATA</strong> (stemdiff.gvars.SourceData object):\nThe object describes source data (detector, data_dir, filenames).</li>\n<li><strong>filename</strong> (string or pathlib object):\nName of datafile to be read into numpy 2D array.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nThe array converted from datafile with given <em>filename</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Datafiles.show", "modulename": "stemdiff.io", "qualname": "Datafiles.show", "kind": "function", "doc": "<p>Show datafile/diffractogram with basic characteristics.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SDATA</strong> (stemdiff.gvars.SourceData object):\nThe object describes source data (detector, data_dir, filenames).</li>\n<li><strong>filename</strong> (str or Path):\nName of datafile to be shown.</li>\n<li><strong>icut</strong> (integer, optional, default is None):\nCut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>itype</strong> (string, optional, '8bit' or '16bit', default is None):\nType of the image - 8-bit or 16-bit.\nIf itype equals None or '16-bit' the image is treated as 16-bit.</li>\n<li><strong>R</strong> (integer, optional, default is None):\nRescale coefficient;\nthe input array is rescaled (usually upscaled) R-times.\nFor typical 2D-STEM detector with size 256x256 pixels,\nthe array should be processed with R=4\nin order to get sufficiently large image for further processing.</li>\n<li><strong>cmap</strong> (str - matplotlib.colormap name, optional, the default is 'gray'):\nMatplotlib colormap for plotting of the array.\nOther interesting or high-contrast options:\n'viridis', 'plasma', 'magma' ...\nThe full list of matplotlib colormaps:\n<code>matplotlib.pyplot.colormaps()</code></li>\n<li><strong>center</strong> (bool, optional, default is False):\nIf True, intensity center is drawn in the final image.</li>\n<li><strong>csquare</strong> (integer, optional, default is 20):\nEdge of a central square, from which the center will be determined.\nIgnored if center == False.</li>\n<li><strong>cintensity</strong> (float in interval 0--1, optional, default is 0.8):\nThe intensity &lt; maximum_intensity * cintensity is regarded as 0\n(a simple temporary background removal in the central square).\nIgnored if center == False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The output is the datafile shown as an image on the screen.</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<p>This function just combines Datafiles.read + Arrays.show functions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">SDATA</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Datafiles.show_from_disk", "modulename": "stemdiff.io", "qualname": "Datafiles.show_from_disk", "kind": "function", "doc": "<p>Show datafiles (stored in a disk) from 2D-STEM detector. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SDATA</strong> (stemdiff.gvars.SourceData object):\nThe object describes source data (detector, data_dir, filenames).</li>\n<li><strong>interactive</strong> (bool, optional, the defailt is True):\nIf True, images are shown interactively,\ni.e. any key = show next image, 'q' = quit.</li>\n<li><strong>max_files</strong> (integer, optional, the default is None):\nIf not(interactive==True) and max_files &gt; 0,\nshow files non-interactively = in one run, until\nnumber of files is less than max_files limit.</li>\n<li><strong>icut</strong> (integer, optional, default is None):\nCut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>itype</strong> (string, optional, None or '8bit' or '16bit'):\nType of the image - 8-bit or 16-bit.\nIf itype equals None or '16-bit' the image is treated as 16-bit.</li>\n<li><strong>R</strong> (integer, optional, default is None):\nRescale coefficient;\nthe input array is rescaled (usually upscaled) R-times.\nFor typical 2D-STEM detector with size 256x256 pixels,\nthe array should be processed with R=4\nin order to get sufficiently large image for further processing.</li>\n<li><strong>cmap</strong> (str - matplotlib.colormap name, optional, the default is 'gray'):\nMatplotlib colormap for plotting of the array.\nOther interesting or high-contrast options:\n'viridis', 'plasma', 'magma', ...\nThe full list of matplotlib colormaps:\n<code>matplotlib.pyplot.colormaps()</code></li>\n<li><strong>center</strong> (bool, optional, default is False):\nIf True, intensity center is drawn in the final image.</li>\n<li><strong>csquare</strong> (integer, optional, default is 20):\nEdge of a central square, from which the center will be determined.\nIgnored if center == False.</li>\n<li><strong>cintensity</strong> (float in interval 0--1, optional, default is 0.8):\nThe intensity &lt; maximum_intensity * cintensity is regarded as 0\n(a simple temporary background removal in the central square).\nIgnored if center == False.</li>\n<li><strong>peak_height</strong> (int, optional, default is 100):\nMinimal height of the peak to be detected.</li>\n<li><strong>peak_distance</strong> (int, optional, default is 5):\nMinimal distance between two peaks so that they were separated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The output are the files and their characteristics on the screen.</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<p>This function uses Datafiles.read and than Arrays.functions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">SDATA</span>,</span><span class=\"param\">\t<span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">max_files</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">peak_height</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">peak_distance</span><span class=\"o\">=</span><span class=\"mi\">9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Datafiles.show_from_database", "modulename": "stemdiff.io", "qualname": "Datafiles.show_from_database", "kind": "function", "doc": "<p>Show datafiles (pre-selected in a database) from 2D-STEM detector.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SDATA</strong> (TYPE):\nDESCRIPTION.</li>\n<li><strong>df</strong> (TYPE):\nDESCRIPTION.</li>\n<li><strong>interactive</strong> (bool, optional, the defailt is True):\nIf True, images are shown interactively,\ni.e. any key = show next image, 'q' = quit.</li>\n<li><strong>max_files</strong> (integer, optional, the default is None):\nIf not(interactive==True) and max_files &gt; 0,\nshow files non-interactively = in one run, until\nnumber of files is less than max_files limit.</li>\n<li><strong>icut</strong> (integer, optional, default is None):\nCut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>itype</strong> (string, optional, '8bit' or '16bit', default is '8bit'):\nType of the image - 8 or 16 bit grayscale.</li>\n<li><strong>cmap</strong> (str - matplotlib.colormap name, optional, the default is 'gray'):\nMatplotlib colormap for plotting of the array.\nOther interesting or high-contrast options:\n'viridis', 'plasma', 'magma', ...\nThe full list of matplotlib colormaps:\n<code>matplotlib.pyplot.colormaps()</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The output are the files and their characteristics on the screen.</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<p>This function uses Datafiles.read function to read data from database.\nAs it uses database data, it cannot use standard Arrays functions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">SDATA</span>,</span><span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">max_files</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays", "modulename": "stemdiff.io", "qualname": "Arrays", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "stemdiff.io.Arrays.show", "modulename": "stemdiff.io", "qualname": "Arrays.show", "kind": "function", "doc": "<p>Show 2D-array as an image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nArray to show.</li>\n<li><strong>icut</strong> (integer, optional, default is None):\nCut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>itype</strong> (string, optional, None or '8bit' or '16bit'):\nType of the image - 8-bit or 16-bit.\nIf itype equals None or '16-bit' the image is treated as 16-bit.</li>\n<li><strong>R</strong> (integer, optional, default is None):\nRescale coefficient;\nthe input array is rescaled (usually upscaled) R-times.\nFor typical 2D-STEM detector with size 256x256 pixels,\nthe array should be processed with R=4\nin order to get sufficiently large image for further processing.</li>\n<li><strong>cmap</strong> (str - matplotlib.colormap name, optional, the default is None):\nMatplotlib colormap for plotting of the array.\nInteresting or high-contrast options:\n'gray', 'viridis', 'plasma', 'magma', ...\nThe full list of matplotlib colormaps:\n<code>matplotlib.pyplot.colormaps()</code></li>\n<li><strong>center</strong> (bool, optional, default is False):\nIf True, intensity center is drawn in the final image.</li>\n<li><strong>csquare</strong> (integer, optional, default is 20):\nEdge of a central square, from which the center will be determined.\nIgnored if center == False.</li>\n<li><strong>cintensity</strong> (float in interval 0--1, optional, default is 0.8):\nThe intensity &lt; maximum_intensity * cintensity is regarded as 0\n(a simple temporary background removal in the central square).\nIgnored if center == False.</li>\n<li><strong>plt_type</strong> (str, '2D' or '3D', optional, default is '2D'):\nType of the plot: 2D-dimensional or 3D-dimensional/surface plot.</li>\n<li><strong>plt_size</strong> (int, optional, default is not):\nIf given, we plot only the central region with size = <em>plt_size</em>.\nFor central region we use a geometric center - see Technical notes.</li>\n<li><strong>colorbar</strong> (bool, optional, the default is False):\nIf True, a colorbar is added to the plot.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The output is the array shown as an image on the screen.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<ul>\n<li>In this function, we <em>do not</em> center the image/array.\nCenter can be drawn to 2D-image, but array <em>is not centered</em>.</li>\n<li>Edges can be removed (using plt_size argument),\nbut only only with respect to the geometrical center,\nwhich means that the function shows a <em>non-cenered central region</em>.</li>\n<li>If you need to show <em>centered central region</em> of an array,\ncombine Arrays.find_center + Arrays.remove_edges + Arrays.show</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arr</span>,</span><span class=\"param\">\t<span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">plt_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;2D&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">plt_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colorbar</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.describe", "modulename": "stemdiff.io", "qualname": "Arrays.describe", "kind": "function", "doc": "<p>Describe 2D-array = print XY-center, MaxIntensity, Peaks, Sh-entropy.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nArray to describe.</li>\n<li><strong>csquare</strong> (integer, optional, default is None):\nEdge of a central square, from which the center will be determined.</li>\n<li><strong>cintensity</strong> (float in interval 0--1, optional, default is None):\nThe intensity &lt; maximum_intensity * cintensity is regarded as 0\n(a simple temporary background removal in the central square).</li>\n<li><strong>peak_height</strong> (int, optional, default is 100):\nMinimal height of the peak to be detected.</li>\n<li><strong>peak_distance</strong> (int, optional, default is 5):\nMinimal distance between two peaks so that they were separated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The array characteristics are just printed.</li>\n</ul>\n\n<h6 id=\"technical-note\">Technical note</h6>\n\n<p>This function is just a wrapper\naround several np.functions and Arrays.functions.\nTo get the values, use the individual functions instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>, </span><span class=\"param\"><span class=\"n\">peak_height</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">peak_distance</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.find_center", "modulename": "stemdiff.io", "qualname": "Arrays.find_center", "kind": "function", "doc": "<p>Determine center of mass for 2D numpy array.\nArray center = mass/intensity center ~ position of central spot.\nWarning: In most cases, geometric center is NOT mass/intensity center.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (numpy 2D array):\nNumpy 2D array, whose center (of mass ~ intensity) we want to get.</li>\n<li><strong>csquare</strong> (integer, optional, default is None):\nEdge of a central square, from which the center will be determined.</li>\n<li><strong>cintensity</strong> (float in interval 0--1, optional, default is None):\nThe intensity &lt; maximum_intensity * cintensity is regarded as 0\n(a simple temporary background removal in the central square).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>xc,yc</strong> (integers):\nCoordinates of the intesity center = position of the primary beam.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.number_of_peaks", "modulename": "stemdiff.io", "qualname": "Arrays.number_of_peaks", "kind": "function", "doc": "<p>Estimate number of peaks in given array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nArray, for which we want to determine the number of peaks.</li>\n<li><strong>peak_height</strong> (float):\nHeight of peak with respect to background; obligatory argument.</li>\n<li><strong>peak_distance</strong> (int, optional, default is None):\nDistance between two neighboring peaks.\nIf given, distance matrix is calculated out of it.</li>\n<li><strong>neighborhood_matrix</strong> (numpy 2D-array, optional, default is None):\nThe neighborhood expressed as a 2D-array of 1's and 0's.\nThe neighborhood matrix can be eigher given directly\n(using argument neighborhood_matrix) or indirectly\n(calculated from argument peak_distance).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>no_of_peaks</strong> (int):\nEstimated number of peaks (local maxima) in given array.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">peak_height</span>, </span><span class=\"param\"><span class=\"n\">peak_distance</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">neighborhood_matrix</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.rescale", "modulename": "stemdiff.io", "qualname": "Arrays.rescale", "kind": "function", "doc": "<p>Rescale 2D numpy array (which represents an image).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nNumpy array representing DAT-file/image.</li>\n<li><strong>R</strong> (integer):\nRescale parameter: new_size_of the array = original_size * R</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>2D numpy array</strong>: The array has new_size = original_size * R</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">R</span>, </span><span class=\"param\"><span class=\"n\">order</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.remove_edges", "modulename": "stemdiff.io", "qualname": "Arrays.remove_edges", "kind": "function", "doc": "<p>Cut array to rsize by removing edges; center of new array = (xc,yc).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (numpy 2D array):\nThe original array, whose size should be reduced.</li>\n<li><strong>rsize</strong> (integer):\nThe size of reduced array.</li>\n<li><strong>xc,yc</strong> (integers):\nThe center of original array;\nthe reduced array is cut to rsize, center of new array is in xc,yc.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nThe array with reduced size.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">rsize</span>, </span><span class=\"param\"><span class=\"n\">xc</span>, </span><span class=\"param\"><span class=\"n\">yc</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.save_as_image", "modulename": "stemdiff.io", "qualname": "Arrays.save_as_image", "kind": "function", "doc": "<p>Save 2D numpy array as grayscale image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nArray or image object to save.</li>\n<li><strong>output_image</strong> (string or pathlib object):\nName of the output/saved file.</li>\n<li><strong>icut</strong> (integer):\nCut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>itype</strong> (string ('8bit'  or '16bit')):\nType of the image: 8 or 16 bit grayscale.</li>\n<li><strong>R</strong> (integer):\nRescale coefficient;\nthe input array is rescaled/enlarged R-times.\nFor typical 2D-STEM detector with size 256x256 pixels,\nthe array should be saved with R = 2 (or 4)\nin order to get sufficiently large image for further processing.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The output is <em>arr</em> saved as <em>output_image</em> on a disk.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">output_image</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.save_as_datafile", "modulename": "stemdiff.io", "qualname": "Arrays.save_as_datafile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Arrays.prepare_for_show_or_save", "modulename": "stemdiff.io", "qualname": "Arrays.prepare_for_show_or_save", "kind": "function", "doc": "<p>Prepare 2D numpy array (which contains a 2D-STEM datafile)\nfor showing/saving as grayscale image.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nArray or image object to save.</li>\n<li><strong>icut</strong> (integer, optional, default is None):\nCut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>itype</strong> (string, optional, '8bit' or '16bit', default is None.):\nType of the image - 8-bit or 16-bit grayscale.\nIf none, then the image is saved as 16-bit.</li>\n<li><strong>R</strong> (integer, optional, default is None):\nRescale coefficient;\nthe input array is rescaled/enlarged R-times.\nFor typical 2D-STEM detector with size 256x256 pixels,\nthe array should be saved with R = 2 (or 4)\nin order to get sufficiently large image for further processing.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nThe modified array ready for showing or saving on a disk.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Images", "modulename": "stemdiff.io", "qualname": "Images", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "stemdiff.io.Images.read", "modulename": "stemdiff.io", "qualname": "Images.read", "kind": "function", "doc": "<p>Read grayscale image into 2D numpy array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image_name</strong> (string or pathlib object):\nName of image that should read into numpy 2D array.</li>\n<li><strong>itype</strong> (string ('8bit'  or '16bit')):\ntype of the image: 8 or 16 bit grayscale</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nThe array converted from <em>image_name</em>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">image_name</span>, </span><span class=\"param\"><span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.io.Images.show", "modulename": "stemdiff.io", "qualname": "Images.show", "kind": "function", "doc": "<p>Read and display image from disk.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>image_name</strong> (str or path-like object):\nName of image to read.</li>\n<li><strong>icut</strong> (integer, optional, default is None):\nCut of intensity;\nif icut = 300, all image intensities &gt; 300 will be equal to 300.</li>\n<li><strong>itype</strong> (string, optional, '8bit' or '16bit', default is '8bit'):\nType of the image - 8 or 16 bit grayscale.</li>\n<li><strong>R</strong> (integer, optional, default is None):\nRescale coefficient;\nthe input array is rescaled (usually upscaled) R-times.\nFor typical 2D-STEM detector with size 256x256 pixels,\nthe array should be processed with R=4\nin order to get sufficiently large image for further processing.</li>\n<li><strong>cmap</strong> (str - matplotlib.colormap name, optional, the default is 'gray'):\nMatplotlib colormap for plotting of the array.\nOther interesting or high-contrast options:\n'viridis', 'plasma', 'magma', ...\nThe full list of matplotlib colormaps:\n<code>matplotlib.pyplot.colormaps()</code></li>\n<li><strong>center</strong> (bool, optional, default is False):\nIf True, intensity center is drawn in the final image.</li>\n<li><strong>csquare</strong> (integer, optional, default is 20):\nEdge of a central square, from which the center will be determined.\nIgnored if center == False.</li>\n<li><strong>cintensity</strong> (float in interval 0--1, optional, default is 0.8):\nThe intensity &lt; maximum_intensity * cintensity is regarded as 0\n(a simple temporary background removal in the central square).\nIgnored if center == False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The output is <em>image_name</em> shown on the screen.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">image_name</span>,</span><span class=\"param\">\t<span class=\"n\">icut</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">itype</span><span class=\"o\">=</span><span class=\"s1\">&#39;8bit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">csquare</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">cintensity</span><span class=\"o\">=</span><span class=\"mf\">0.8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.mcore", "modulename": "stemdiff.mcore", "kind": "module", "doc": "<h2 id=\"stemdiffmcore\">stemdiff.mcore</h2>\n\n<p>Multicore processing ...</p>\n\n<p>Assigned to Pavlina.</p>\n"}, {"fullname": "stemdiff.psf", "modulename": "stemdiff.psf", "kind": "module", "doc": "<h2 id=\"stemdiffpsf\">stemdiff.psf</h2>\n\n<p>The calculation a 2D-PSF function from low-entropy 4D-STEM datafiles.</p>\n\n<p>PSF = Point Spread Function = XY-spread of the primary beam</p>\n"}, {"fullname": "stemdiff.psf.save_psf_to_disk", "modulename": "stemdiff.psf", "qualname": "save_psf_to_disk", "kind": "function", "doc": "<p>Save PSF function;\nthe function is saved as a file in NumPy format = NPY-file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\nThe array with the saved 2D-PSF function, which represents\nthe experimentally determined XY-spread of the primary beam.</li>\n<li><strong>output_file</strong> (str):\nName of the output file (without extension);\nthe saved file will be named <em>output_file</em>.npy.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The result is the PSF = 2D-array in numpy format = <em>output_file</em>.npy.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">output_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.read_psf_from_disk", "modulename": "stemdiff.psf", "qualname": "read_psf_from_disk", "kind": "function", "doc": "<p>Read PSF function;\nthe function is read from a file in NumPy format = NPY-file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file</strong> (str):\nThe saved file with the PSF function = NPY-file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>2D-numpy array</strong>: The array with the 2D-PSF function, which represents\nthe experimentally determined XY-spread of the primary beam.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_file</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.plot_psf", "modulename": "stemdiff.psf", "qualname": "plot_psf", "kind": "function", "doc": "<p>Show plot of PSF function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D numpy array):\nThe array with the saved 2D-PSF function, which represents\nthe experimentally determined XY-spread of the primary beam.</li>\n<li><strong>plt_type</strong> (string):\nEither '2D' or '3D' - type of the plot.</li>\n<li><strong>plt_size</strong> (integer, optional, default=None):\nThe size of the plot:\nif plt_size is given, the function plots only the central square\nwith size = plt_size; otherwise it plots the whole array.</li>\n<li><strong>output</strong> (str, optional, default=None):\nThe name of the output file:\nif [output] is given, the function also saves the plot\nwith a filename [output].png; otherwise the plot is just shown.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Nothing</strong>: The function just shows the plot of PSF in 2D or 3D.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">plt_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;2D&#39;</span>, </span><span class=\"param\"><span class=\"n\">plt_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.circular_mask", "modulename": "stemdiff.psf", "qualname": "circular_mask", "kind": "function", "doc": "<p>Create a circular mask for rectangular array</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>h</strong> (int):\nHeight of the array.</li>\n<li><strong>w</strong> (int):\nWidth of the array.</li>\n<li><strong>center</strong> (list or tuple of two integers, optional, default is None):\nCenter of the mask.\nIf None, center will be a geometric center of array.</li>\n<li><strong>radius</strong> (int, optional, default is None):\nRadius of the mask.\nIf None, radius will be the distance to the shorter array wall.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mask</strong> (2D-array of bool values):\nCircular mask: arr * mask = arr with zero values outside the mask.</li>\n</ul>\n\n<h6 id=\"note\">Note</h6>\n\n<p>Copy+pasted and slightly modified from www.\nGoogleSearch: numpy create circular mask on rectangular array\n<a href=\"https://stackoverflow.com/q/44865023\">https://stackoverflow.com/q/44865023</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.PSFtype1", "modulename": "stemdiff.psf", "qualname": "PSFtype1", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "stemdiff.psf.PSFtype1.get_psf", "modulename": "stemdiff.psf", "qualname": "PSFtype1.get_psf", "kind": "function", "doc": "<p>Get PSF of type1 = estimated from datafiles with low/no diffractions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SDATA</strong> (stemdiff.gvars.SourceData object):\nThe object describes source data (detector, data_dir, filenames).</li>\n<li><strong>DIFFIMAGES</strong> (stemdiff.gvars.DiffImages object):\nObject describing the diffraction images/patterns.</li>\n<li><strong>df</strong> (pandas.DataFrame object):\nDatabase with datafile names and characteristics.\nPSF is estimated from the files included in this database.\nTypically, df is a sub-database containing low-diffracting files.</li>\n<li><strong>circular</strong> (bool, optional, default is False):\nIf True, apply circular mask - change square PSF to circular PSF.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>psf</strong> (2D-numpy array):\nThe array represents estimate of experimental PSF.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">DIFFIMAGES</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">circular</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.PSFtype2", "modulename": "stemdiff.psf", "qualname": "PSFtype2", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "stemdiff.psf.PSFtype2.get_psf", "modulename": "stemdiff.psf", "qualname": "PSFtype2.get_psf", "kind": "function", "doc": "<p>Get PSF of type2 = estimated small central region of datafile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\nThe array/datafile, from which the PSF is to be determined.\nThe array is a square with geometrical center = intensity center.\nSee <em>Technical notes</em> below for more details and consequences.</li>\n<li><strong>psf_size</strong> (int):\nThe size/diameter of PSF function to be determined.</li>\n<li><strong>circular</strong> (bool, optional, default is False):\nIf True, apply circular mask - change square PSF to circular PSF.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>psf</strong> (2D-numpy array):\nThe array represents estimate of experimental PSF.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<p>In our algorithm, we send a square centered array to this function.\nThis means that intensity center = geometric center of the array.\nConsequence: we do not have to determine intensity center\nand waste time - it is enough to calculate geometrical center.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">psf_size</span>, </span><span class=\"param\"><span class=\"n\">circular</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.PSFtype3", "modulename": "stemdiff.psf", "qualname": "PSFtype3", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "stemdiff.psf.PSFtype3.get_psf", "modulename": "stemdiff.psf", "qualname": "PSFtype3.get_psf", "kind": "function", "doc": "<p>Get PSF of type3 = individual PSF based on cake-method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arr</strong> (2D-numpy array):\nThe array/datafile, from which the PSF is to be determined.\nThe array is a square with geometrical center = intensity center.\nSee <em>Technical notes</em> below for more details and consequences.</li>\n<li><strong>psf_size</strong> (int, optional, default):\nThe size/diameter of PSF function to be determined.</li>\n<li><strong>cake</strong> (int):\nSize of cake-piece in degrees.</li>\n<li><strong>subtract</strong> (bool, optional, default is False):\nIf True, prepare PSF with the same size as scattering pattern.\nIn fact, this function <em>does not</em> subtract anything.\nIt can <em>prepare PSF suitable for subtracting</em> if required.\nThe trick is that a PSF suitable for subtracting\nmust have the the same size as the original image = arr.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>psf</strong> (2D-numpy array):\nThe array represents estimate of experimental PSF.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<p>In our algorithm, we send a square centered array to this function.\nThis means that intensity center = geometric center of the array.\nConsequence: we do not have to determine intensity center\nand waste time - it is enough to calculate geometrical center.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span>, </span><span class=\"param\"><span class=\"n\">psf_size</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">cake</span><span class=\"o\">=</span><span class=\"mi\">30</span>, </span><span class=\"param\"><span class=\"n\">subtract</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.psf.PSFtype4", "modulename": "stemdiff.psf", "qualname": "PSFtype4", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "stemdiff.psf.PSFtype4.get_psf", "modulename": "stemdiff.psf", "qualname": "PSFtype4.get_psf", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum", "modulename": "stemdiff.sum", "kind": "module", "doc": "<h2 id=\"stemdiffsum\">stemdiff.sum</h2>\n\n<p>The summation of 4D-STEM datafiles to create one 2D powder diffraction file.</p>\n\n<p>In stemdiff, we can sum datafiles in with or without 2D-PSF deconvolution.\nWe just call function sum_datafiles with various arguments as explained below.\nThe key argument determining type of deconvolution is deconv:</p>\n\n<ul>\n<li>deconv=0 = sum <em>without</em> deconvolution</li>\n<li>deconv=1 = sum deconvolution, fixed PSF from selected datafiles</li>\n<li>deconv=2 = sum with deconvolution, individual PSF from central region</li>\n<li>deconv=3 = sum with deconvolution, individual PSF from whole datafile</li>\n</ul>\n"}, {"fullname": "stemdiff.sum.sum_datafiles", "modulename": "stemdiff.sum", "qualname": "sum_datafiles", "kind": "function", "doc": "<p>Sum datafiles from a 4D-STEM dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>SDATA</strong> (stemdiff.gvars.SourceData object):\nThe object describes source data (detector, data_dir, filenames).</li>\n<li><strong>DIFFIMAGES</strong> (stemdiff.gvars.DiffImages object):\nObject describing the diffraction images/patterns.</li>\n<li><strong>df</strong> (pandas.DataFrame object):\nDatabase with datafile names and characteristics.</li>\n<li><strong>deconv</strong> (int, optional, default is 0):\nDeconvolution type:\n0 = no deconvolution,\n1 = deconvolution based on external PSF,\n2 = deconvolution based on PSF from central region,\n3 = deconvolution based on PSF from whole datafile.</li>\n<li><strong>iterate</strong> (integer, optional, default is 10):\nNumber of iterations during the deconvolution.</li>\n<li><strong>psf</strong> (2D-numpy array or None, optional, default is None):\nArray representing 2D-PSF function.\nRelevant only for deconv = 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>final_arr</strong> (2D numpy array):\nThe array is a sum of datafiles;\nif the datafiles are pre-filtered, we get sum of filtered datafiles,\nif PSF is given, we get sum of datafiles with PSF deconvolution.</li>\n</ul>\n\n<h6 id=\"technical-notes\">Technical notes</h6>\n\n<p>This function works as signpost.\nIt reads the summation parameters and\ncalls more specific summation function.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">SDATA</span>,</span><span class=\"param\">\t<span class=\"n\">DIFFIMAGES</span>,</span><span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">deconv</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">iterate</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">psf</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cake</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">subtract</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_without_deconvolution", "modulename": "stemdiff.sum", "qualname": "sum_without_deconvolution", "kind": "function", "doc": "<p>Sum datafiles wihtout deconvolution.</p>\n\n<ul>\n<li>Parameters of the function:\n<ul>\n<li>This function is usually called from stemdiff.sum.sum_files.</li>\n<li>The parameters are transferred from the sum_files function</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">DIFFIMAGES</span>, </span><span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_with_deconvolution_type1", "modulename": "stemdiff.sum", "qualname": "sum_with_deconvolution_type1", "kind": "function", "doc": "<p>Sum datafiles with 2D-PSF deconvolution of type1.</p>\n\n<p>This function is usually called from stemdiff.sum.sum_datafiles.\nFor argument description see the abovementioned function.</p>\n\n<ul>\n<li>What is deconvolution type1:\n<ul>\n<li>Richardson-Lucy deconvolution.</li>\n<li>2D-PSF function estimated from files with negligible diffractions.</li>\n<li>Therefore, the 2D-PSF function is the same for all summed datafiles.</li>\n</ul></li>\n<li>Parameters of the function:\n<ul>\n<li>This function is usually called from stemdiff.sum.sum_files.</li>\n<li>The parameters are transferred from the sum_files function</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">DIFFIMAGES</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">psf</span>, </span><span class=\"param\"><span class=\"n\">iterate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_with_deconvolution_type2", "modulename": "stemdiff.sum", "qualname": "sum_with_deconvolution_type2", "kind": "function", "doc": "<p>Sum datafiles with 2D-PSF deconvolution of type2.</p>\n\n<p>This function is usually called from stemdiff.sum.sum_datafiles.\nFor argument description see the abovementioned function.</p>\n\n<ul>\n<li>What is deconvolution type2:\n<ul>\n<li>Richardson-Lucy deconvolution.</li>\n<li>The 2D-PSF function estimated from central region of each datafile.</li>\n</ul></li>\n<li>Parameters of the function:\n<ul>\n<li>This function is usually called from stemdiff.sum.sum_files.</li>\n<li>The parameters are transferred from the sum_files function</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">DIFFIMAGES</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">iterate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_with_deconvolution_type3", "modulename": "stemdiff.sum", "qualname": "sum_with_deconvolution_type3", "kind": "function", "doc": "<p>Sum datafiles with 2D-PSF deconvolution of type3.</p>\n\n<ul>\n<li>What deconvolution type3:\n<ul>\n<li>Richardson-Lucy deconvolution.</li>\n<li>The 2D-PSF function is estimated from each (whole) datafile.</li>\n<li>The diffractions in 2D-PSF are removed by means of \"cake method\".</li>\n</ul></li>\n<li>Parameters of the function:\n<ul>\n<li>This function is usually called from stemdiff.sum.sum_files.</li>\n<li>The parameters are transferred from the sum_files function</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">SDATA</span>, </span><span class=\"param\"><span class=\"n\">DIFFIMAGES</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">iterate</span>, </span><span class=\"param\"><span class=\"n\">cake</span>, </span><span class=\"param\"><span class=\"n\">subtract</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "stemdiff.sum.sum_with_deconvolution_type4", "modulename": "stemdiff.sum", "qualname": "sum_with_deconvolution_type4", "kind": "function", "doc": "<p>Sum datafiles with 2D-PSF deconvolution of type4.</p>\n\n<ul>\n<li>What is deconvolution type4: \n<ul>\n<li>Richardson-Lucy deconvolution.</li>\n<li>The 2D-PSF function estimated from whole datafile (~type3).</li>\n<li>The 2D-PSF subtracted from the datafile (background removal).</li>\n<li>Final deconvolution with 2D-PSF from central region (~type2).</li>\n</ul></li>\n<li>Parameters of the function:\n<ul>\n<li>This function is usually called from stemdiff.sum.sum_files.</li>\n<li>The parameters are transferred from the sum_files function</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">DETECTOR</span>, </span><span class=\"param\"><span class=\"n\">DATAFILES</span>, </span><span class=\"param\"><span class=\"n\">DIFFIMAGES</span>, </span><span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">iterate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();